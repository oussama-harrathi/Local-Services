// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer")
  phone         String?   @unique
  phoneVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  providerProfile ProviderProfile?
  reviews         Review[]
  favorites       Favorite[]
  reports         Report[]
  phoneVerifications PhoneVerification[]
  rateLimitEntries   RateLimitEntry[]
  bookings        Booking[]
  orders          Order[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ProviderProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  name       String
  city       String
  lat        Float
  lng        Float
  categories String   // Comma-separated categories for SQLite compatibility
  bio        String
  avatarUrl  String
  photos     String?  // Comma-separated photo URLs for SQLite compatibility
  whatsapp   String?
  messenger  String?
  isVerified Boolean  @default(false)
  isHidden   Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews   Review[]
  favorites Favorite[]
  reports   Report[]   @relation("ProviderReports")
  schedules ProviderSchedule[]
  bookings  Booking[]
  orders    Order[]
  
  @@map("provider_profiles")
}

model Review {
  id         String   @id @default(cuid())
  providerId String
  userId     String
  rating     Int
  text       String
  isHidden   Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  // Relations
  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports  Report[]        @relation("ReviewReports")
  
  @@unique([userId, providerId])
  @@map("reviews")
}

model Favorite {
  userId     String
  providerId String
  
  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@id([userId, providerId])
  @@map("favorites")
}

model Report {
  id         String   @id @default(cuid())
  reporterId String
  targetType String   // "provider" or "review"
  targetId   String
  reason     String
  details    String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  
  // Relations
  reporter User             @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  provider ProviderProfile? @relation("ProviderReports", fields: [targetId], references: [id], onDelete: Cascade)
  review   Review?          @relation("ReviewReports", fields: [targetId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model PhoneVerification {
  id        String   @id @default(cuid())
  userId    String
  phone     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("phone_verifications")
}

model RateLimitEntry {
  id        String   @id @default(cuid())
  userId    String?
  phone     String?
  ipAddress String?
  action    String   // "review_submission", "phone_verification", etc.
  count     Int      @default(1)
  windowStart DateTime
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, action, windowStart])
  @@index([phone, action, windowStart])
  @@index([ipAddress, action, windowStart])
  @@map("rate_limit_entries")
}

model ProviderSchedule {
  id         String   @id @default(cuid())
  providerId String
  dayOfWeek  Int      // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime  String   // Format: "HH:MM" (24-hour format)
  endTime    String   // Format: "HH:MM" (24-hour format)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, dayOfWeek])
  @@map("provider_schedules")
}

model Booking {
  id          String   @id @default(cuid())
  customerId  String
  providerId  String
  serviceType String   // The category/service being booked
  date        DateTime // The date and time of the appointment
  duration    Int      // Duration in minutes
  notes       String?  // Customer notes
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  totalPrice  Float?   // Optional price
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customer User            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@map("bookings")
}

model Order {
  id          String   @id @default(cuid())
  customerId  String
  providerId  String
  items       String   // JSON string of ordered items
  totalPrice  Float
  notes       String?  // Customer notes
  status      String   @default("pending") // pending, confirmed, preparing, ready, delivered, cancelled
  deliveryAddress String?
  deliveryTime    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customer User            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  provider ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@map("orders")
}
